# EDA
from .auto_eda import *

# Dashboard
from explainerdashboard import *
from explainerdashboard.custom import *
import dash as html
import dash_bootstrap_components as dbc
from dash import Dash, dcc, html, Input, Output, dash_table, State
import dash_mantine_components as dmc

class BlankComponent(ExplainerComponent):
    """
    Return an empty component to the dashboard
    """
    def __init__(self, explainer, title="Blank", name=None):
        super().__init__(explainer, title=title)
        
    def layout(self):
        return None
    
# class DtaleComponent(ExplainerComponent): ## COMMENTED OUT FOR 3.7
#     """
#     A component class for linking the dashboard to the D-Tale interface.
#     """
#     def __init__(self, explainer, href, title="Dtale", name=None):
#         """
#         Args:
#             explainer: a dummy explainer, won't really be utilized to extract info from
#             href (str): the link generated by the D-Tale function
#             title (str, optional): title of the component. Defaults to "Dtale".
#             name (optional): name of the component. Defaults to None.
#         """
#         super().__init__(explainer, title=title)
#         self.href = href
        
#     def layout(self):
#         return dbc.Container([
#             dbc.Card([
#                 dbc.CardHeader([
#                     html.H4("D-Tale")
#                 ]),
#                 dbc.CardBody([
#                     dbc.Row([
#                         dbc.Col([
#                             html.Div(dcc.Markdown('''
#                                 D-Tale is the combination of a Flask back-end and a React front-end to bring you an easy way to view & analyze Pandas data structures. It integrates seamlessly with ipython notebooks & python/ipython terminals. Currently this tool supports such Pandas objects as DataFrame, Series, MultiIndex, DatetimeIndex & RangeIndex. Clicking the button will lead you to another page.
#                             '''), style={"padding":"30px"})
#                         ])
#                     ]),
#                     dbc.Row([
#                         dbc.Col([
#                             html.Div()
#                         ]),
#                         dbc.Col([
#                             html.Div(dbc.Button("Click Here", id="link-centered", className="ml-auto", href=self.href[0].replace('/n','')), style={'margin':'auto'})
#                         ], width='auto'),
#                         dbc.Col([
#                             html.Div()
#                         ])
#                     ]),
#                 ])
#             ])
#         ])
    
class AutoVizComponent(ExplainerComponent):
    """
    A dashboard component that displays the generated html figures from AutoViz_Class
    """
    def __init__(self, explainer, title="AutoViz", name=None):
        """
        Args:
            explainer: a dummy explainer, won't really be utilized to extract info from
            href (str): the link generated by the AutoViz function
            title (str, optional): title of the component. Defaults to "AutoViz".
            name (optional): name of the component. Defaults to None.
        """
        super().__init__(explainer, title=title)
        with open(f"AutoViz_Plots/AutoViz/cat_var_plots.html", "r") as f:
            self.cat_var =  f.read()
        with open(f"AutoViz_Plots/AutoViz/distplots_nums.html", "r") as f:
            self.distplots =  f.read()
        with open(f"AutoViz_Plots/AutoViz/heatmaps.html", "r") as f:
            self.heatmaps =  f.read()
        with open(f"AutoViz_Plots/AutoViz/pair_scatters.html", "r") as f:
            self.pair_scatters =  f.read()
        with open(f"AutoViz_Plots/AutoViz/violinplots.html", "r") as f:
            self.violinplots =  f.read()
        
    def layout(self):
        return dbc.Container([
            dbc.Card([
                dbc.CardHeader([
                    html.H4("AutoViz")
                ]),
                dbc.CardBody([
                    dbc.Row([
                        dbc.Col([
                            html.Div(dcc.Markdown('''
                                With AutoViz, you can easily and quickly generate insightful visualizations for your data. Whether you're a beginner or an expert in data analysis, AutoViz can help you explore your data and uncover valuable insights. Try it out and see the power of automated visualization for yourself!
                            '''), style={"padding":"30px"})
                        ])
                    ]),
                    html.Div(
                        children=[
                            html.Iframe(
                                srcDoc=f"{self.cat_var}", style={"height": "500px", "width": "98%"}),
                        ]
                    ),
                    html.Br(),
                    html.Div(
                        children=[
                            html.Iframe(
                                srcDoc=f"{self.distplots}", style={"height": "500px", "width": "98%"}),
                        ]
                    ),
                    html.Br(),
                    html.Div(
                        children=[
                            html.Iframe(
                                srcDoc=f"{self.heatmaps}", style={"height": "850px", "width": "98%"}),
                        ]
                    ),
                    html.Br(),
                    html.Div(
                        children=[
                            html.Iframe(
                                srcDoc=f"{self.pair_scatters}", style={"height": "500px", "width": "98%"}),
                        ]
                    ),
                    html.Br(),
                    html.Div(
                        children=[
                            html.Iframe(
                                srcDoc=f"{self.violinplots}", style={"height": "350px", "width": "98%"}),
                        ]
                    ),
                    html.Br(),
                ])
            ])
        ])
    
class EDATab(ExplainerComponent):
    """
    A tab class for displaying all of the Auto EDA components.
    """
    def __init__(self, explainer, href = None , # DUE TO DTALE
                 title="EDA", name=None):
        """
        Args:
            explainer: a dummy explainer, won't really be utilized to extract info from
            href (str): the link generated by the EDA function
            title (str, optional): title of the component. Defaults to "EDA".
            name (optional): name of the component. Defaults to None.
        """
        super().__init__(explainer, title=title)
        # self.dtale = DtaleComponent(explainer, href) ## COMMENTED OUT
        self.autoviz = AutoVizComponent(explainer)
        with open(f"assets/your_report.html", "r") as f:
            self.html_content =  f.read()
        
    def layout(self):
        return dbc.Container([
            html.Br(),
            dbc.Card([
                dbc.CardHeader([
                    html.H4("Pandas Profiling")
                ]),
                dbc.CardBody([
                    html.Div(html.Iframe(srcDoc=f"{self.html_content}", style={"height": "1067px", "width": "98%"})),
                ])
            ]),
            html.Br(),
            # self.dtale.layout(), ## COMMENTED OUT
            html.Br(),
            self.autoviz.layout(),
        ])